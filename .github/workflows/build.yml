name: Cross-platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain: [stable]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      run: |
        rustup update ${{ matrix.toolchain }}
        rustup default ${{ matrix.toolchain }}
        
    - name: Install build targets
      run: |
        rustup target add x86_64-unknown-linux-gnu
        rustup target add x86_64-pc-windows-msvc
        rustup target add x86_64-apple-darwin
        rustup target add aarch64-apple-darwin
        rustup target add wasm32-unknown-unknown
        
    - name: Install Linux dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
        
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # Windows usually doesn't need additional system dependencies for Rust/C compilation
        echo "Windows dependencies configured"
        
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # macOS usually doesn't need additional system dependencies for Rust/C compilation
        echo "macOS dependencies configured"
        
    - name: Build for host platform
      run: cargo build --release
      
    - name: Build for Linux (x86_64)
      if: matrix.os != 'ubuntu-latest'
      run: cargo build --target x86_64-unknown-linux-gnu --release
      
    - name: Build for Windows (x86_64)
      if: matrix.os != 'windows-latest'
      run: cargo build --target x86_64-pc-windows-msvc --release
      
    - name: Build for macOS (x86_64)
      if: matrix.os != 'macos-latest'
      run: cargo build --target x86_64-apple-darwin --release
      
    - name: Build for macOS (aarch64)
      run: cargo build --target aarch64-apple-darwin --release
      
    - name: Build for WebAssembly
      run: cargo build --target wasm32-unknown-unknown --release
      
    - name: Run tests
      run: cargo test --release
      
    - name: Upload build artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: mingbu-linux-${{ matrix.toolchain }}
        path: |
          target/release/libmingbu.a
          target/wasm32-unknown-unknown/release/mingbu.wasm
          
    - name: Upload build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: mingbu-windows-${{ matrix.toolchain }}
        path: |
          target/release/mingbu.lib
          target/release/mingbu.dll
          target/wasm32-unknown-unknown/release/mingbu.wasm
          
    - name: Upload build artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: mingbu-macos-${{ matrix.toolchain }}
        path: |
          target/release/libmingbu.a
          target/wasm32-unknown-unknown/release/mingbu.wasm