name: Cross-platform Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain: [stable]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      run: |
        rustup update ${{ matrix.toolchain }}
        rustup default ${{ matrix.toolchain }}
        
    - name: Install build targets
      run: |
        # Install wasm target for all platforms
        rustup target add wasm32-unknown-unknown
        # Add macOS cross-compilation targets only on macOS
        if [ "$RUNNER_OS" = "macOS" ]; then
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
        fi
      shell: bash
        
    - name: Install Linux dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev libclang-dev
        
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # Windows usually doesn't need additional system dependencies for Rust/C compilation
        echo "Windows dependencies configured"
        
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # Install lipo for creating universal binaries
        echo "macOS dependencies configured"
        
    - name: Build for host platform
      if: matrix.os != 'macos-latest'
      run: cargo build --release
      
    - name: Build for macOS x86_64 (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        cargo build --target x86_64-apple-darwin --release
      shell: bash
        
    - name: Build for macOS aarch64 (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        cargo build --target aarch64-apple-darwin --release
      shell: bash
      
    - name: Run tests
      if: matrix.os != 'macos-latest'
      run: cargo test --release
      
    - name: Run tests (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: cargo test --release
      
    - name: Create macOS universal binary
      if: matrix.os == 'macos-latest'
      run: |
        # Create a universal binary from x86_64 and aarch64 builds
        lipo -create \
          target/x86_64-apple-darwin/release/libmingbu.a \
          target/aarch64-apple-darwin/release/libmingbu.a \
          -output target/release/libmingbu_universal.a
      shell: bash
          
    - name: Upload build artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: mingbu-linux-x86_64-${{ matrix.toolchain }}
        path: |
          target/release/libmingbu.a
          
    - name: Upload build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: mingbu-windows-x86_64-${{ matrix.toolchain }}
        path: |
          target/release/mingbu.lib
          target/release/mingbu.dll
          
    - name: Upload build artifacts (Linux host test)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: mingbu-linux-x86_64-tests-${{ matrix.toolchain }}
        path: |
          target/release/deps/libmingbu*
          
    - name: Upload build artifacts (macOS x86_64)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: mingbu-macos-x86_64-${{ matrix.toolchain }}
        path: |
          target/x86_64-apple-darwin/release/libmingbu.a
          
    - name: Upload build artifacts (macOS aarch64)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: mingbu-macos-aarch64-${{ matrix.toolchain }}
        path: |
          target/aarch64-apple-darwin/release/libmingbu.a
          
    - name: Upload build artifacts (macOS universal)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: mingbu-macos-universal-${{ matrix.toolchain }}
        path: |
          target/release/libmingbu_universal.a

  build-wasm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      run: |
        rustup update ${{ matrix.toolchain }}
        rustup default ${{ matrix.toolchain }}
        rustup target add wasm32-unknown-unknown
        
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev libclang-dev
        
    - name: Build for WebAssembly
      run: cargo build --target wasm32-unknown-unknown --release
      
    - name: Run tests for WebAssembly
      run: cargo test --target wasm32-unknown-unknown --release
      
    - name: Upload WebAssembly artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mingbu-wasm-${{ matrix.toolchain }}
        path: |
          target/wasm32-unknown-unknown/release/mingbu.wasm